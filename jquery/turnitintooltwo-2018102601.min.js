!function($){$(window).on("load",function(){var dataTablesLang,activeTab;$(".js_required").show(),$(".js_hide").hide(),1==$("#id_submissiontype").val()&&$("#id_submissiontext").parent().parent().hide(),2==$("#id_submissiontype").val()&&$("#id_submissionfile").parent().parent().hide(),$("#id_submissionagreement").length&&$("#id_submitbutton").attr("disabled","disabled"),$("#id_submissionagreement").on("click",function(){$(this).is(":checked")?$("#id_submissionagreement").each(function(){$("#id_submitbutton").removeAttr("disabled")}):$("#id_submissionagreement").each(function(){$("#id_submitbutton").attr("disabled","disabled")})}),$("div.mod_turnitintooltwo").parent().css("width","100%"),$(document).on("click",".delete_paper",function(){var i=$(this).data("confirm"),i=M.str.turnitintooltwo[i].replace(/\\n/g,"\n");confirm(i)&&$.ajax({type:"POST",url:"ajax.php",dataType:"html",data:{action:"deletesubmission",sesskey:M.cfg.sesskey,paper:$(this).data("paper"),part:$(this).data("part"),assignment:$(this).data("assignment")},success:function(){window.location.href=window.location.href}})}),$(document).on("click",".submit_nothing",function(){var i,e,t;$(this).hasClass("disabled")||($(this).addClass("disabled"),i=$(this).prop("id").split("_")[2],e=$(this).prop("id").split("_")[3],t=M.str.turnitintooltwo.submitnothingwarning.replace(/<br>/g,"\n").replace(/&#39;/g,"'"),$.cookie("submitnothingaccept")||confirm(t)?submitNothing(e,i):$(this).removeClass("disabled"))}),$(document).on("change","#id_submissiontype",function(){1==$("#id_submissiontype").val()&&($("#id_submissiontext").parent().parent().hide(),$("#id_submissionfile").parent().parent().show()),2==$("#id_submissiontype").val()&&($("#id_submissionfile").parent().parent().hide(),$("#id_submissiontext").parent().parent().show())}),$(document).on("submit",".submission_form_container form",function(){return 0<$("#id_submissiontitle").val().length&&($("#general").slideUp("slow"),$(".mod_turnitintooltwo .noticebox").slideUp("slow"),$(".submission_form_container form").slideUp("slow"),$("#submitting_loader").slideDown("slow"),!0)}),0<$(".toggle_summary").length&&($.cookie("show_summary_"+$("#assignment_id").html())||$.cookie("show_summary_"+$("#assignment_id").html(),!0,{expires:30}),"true"==$.cookie("show_summary_"+$("#assignment_id").html())?($(".hide_summary_"+$("#assignment_id").html()).show(),$(".show_summary_"+$("#assignment_id").html()).hide(),$(".introduction").slideDown()):($(".show_summary_"+$("#assignment_id").html()).show(),$(".hide_summary_"+$("#assignment_id").html()).hide(),$(".introduction").slideUp()),$(".toggle_summary i").click(function(){$(this).hasClass("show_summary_"+$("#assignment_id").html())?($.cookie("show_summary_"+$("#assignment_id").html(),!0,{expires:30}),$(".show_summary_"+$("#assignment_id").html()).hide(),$(".hide_summary_"+$("#assignment_id").html()).show(),$(".introduction").slideDown()):($.cookie("show_summary_"+$("#assignment_id").html(),!1,{expires:30}),$(".show_summary_"+$("#assignment_id").html()).show(),$(".hide_summary_"+$("#assignment_id").html()).hide(),$(".introduction").slideUp())})),0<$(".toggle_peermarks").length&&($.cookie("show_peermarks_"+$("#assignment_id").html())||$.cookie("show_peermarks_"+$("#assignment_id").html(),!0,{expires:30}),"true"==$.cookie("show_peermarks_"+$("#assignment_id").html())?($(".hide_peermarks_"+$("#assignment_id").html()).show(),$(".show_peermarks_"+$("#assignment_id").html()).hide(),$(".peermark_assignments_container").slideDown()):($(".show_peermarks_"+$("#assignment_id").html()).show(),$(".hide_peermarks_"+$("#assignment_id").html()).hide(),$(".peermark_assignments_container").slideUp()),$(".toggle_peermarks i").click(function(){$(this).hasClass("show_peermarks_"+$("#assignment_id").html())?($.cookie("show_peermarks_"+$("#assignment_id").html(),!0,{expires:30}),$(".show_peermarks_"+$("#assignment_id").html()).hide(),$(".hide_peermarks_"+$("#assignment_id").html()).show(),$(".peermark_assignments_container").slideDown()):($.cookie("show_peermarks_"+$("#assignment_id").html(),!1,{expires:30}),$(".show_peermarks_"+$("#assignment_id").html()).show(),$(".hide_peermarks_"+$("#assignment_id").html()).hide(),$(".peermark_assignments_container").slideUp())})),$(document).on("click",".show_peermark_instructions, .hide_peermark_instructions",function(){var i=$(this).attr("id").split("_");"show"==i[0]?($("#show_peermark_instructions_"+i[3]).hide(),$("#hide_peermark_instructions_"+i[3]).show(),$("#peermark_instructions_"+i[3]).slideDown()):($("#show_peermark_instructions_"+i[3]).show(),$("#hide_peermark_instructions_"+i[3]).hide(),$("#peermark_instructions_"+i[3]).slideUp())}),showPartDatesBoxes(),$(document).on("change","#id_numparts",function(){showPartDatesBoxes()}),$(document).on("click",".splitter-lastname, .splitter-firstname",function(i){var e=$(i.target),t=e.hasClass("sorting_asc"),s="asc",a="desc",i=e.attr("data-col");t||(s="desc",a="asc"),e.closest(".submissionsDataTable").DataTable().order([i,a]).draw(),e.addClass("sorting_"+a).removeClass("sorting sorting_"+s),e.parent().removeClass("sorting sorting_asc sorting_desc"),e.siblings().removeClass("sorting_asc sorting_desc").addClass("sorting")}),0<$("#dataTable").length&&$("#dataTable").dataTable(),void 0!==M.str.turnitintooltwo&&(dataTablesLang={sProcessing:'<span class="loading-message">'+M.str.turnitintooltwo.sprocessing+"</span>",sZeroRecords:M.str.turnitintooltwo.szerorecords,sInfo:M.str.turnitintooltwo.sinfo,sSearch:M.str.turnitintooltwo.ssearch,sLengthMenu:M.str.turnitintooltwo.slengthmenu,oPaginate:{sNext:M.str.turnitintooltwo.snext,sPrevious:M.str.turnitintooltwo.sprevious}}),0<$("#tabs").length&&(activeTab=0,0<$("#tab_position").length&&(activeTab=$("#tab_position").text()),$("#tabs").tabs({active:activeTab,show:function(){var i=$.fn.dataTable.fnTables(!0);0<i.length&&$(i).dataTable().fnAdjustColumnSizing()}})),0<$(".enrolledMembers").length&&$(".enrolledMembers").dataTable({bProcessing:!0,sAjaxSource:"ajax.php",aoColumnDefs:[{bSortable:!1,sClass:"centered_cell",aTargets:[0]},{sClass:"left",aTargets:[1]}],oLanguage:dataTablesLang,fnServerData:function(i,e,t){$.ajax({dataType:"json",type:"POST",url:i,data:{action:"get_members",assignment:$("#assignment_id").html(),role:$("#user_role").html()},success:function(i){t(i)},error:function(i,e){$(".dataTables_processing").attr("style","visibility: hidden"),$(".dataTables_empty").html(M.str.turnitintooltwo.membercheckerror)}})}});var submissionsDataTableColumns=[],visibleCols=[],noOfColumns=$("table.submissionsDataTable th").length/$("table.submissionsDataTable").length,notStudentView=0<$("table.submissionsDataTable th.sorting_name").length,showOrigReport=0<$("table.submissionsDataTable th.creport").length,useGradeMark=0<$("table.submissionsDataTable th.cgrade").length,multipleParts=0<$("table.submissionsDataTable th.coverallgrade").length;if(notStudentView)for(var i=0;i<noOfColumns;i++)3==i?(submissionsDataTableColumns.push({sType:"string",bSortable:!1}),visibleCols.push(!0)):2==i?(submissionsDataTableColumns.push({sType:"string",bSortable:!1,bVisible:!1}),visibleCols.push(!1)):5==i?(submissionsDataTableColumns.push({iDataSort:i-1,sType:"string"}),visibleCols.push(!0)):6==i?(submissionsDataTableColumns.push({sClass:"right"}),visibleCols.push(!0)):8==i||10==i&&showOrigReport||10==i&&!showOrigReport||12==i&&useGradeMark?(submissionsDataTableColumns.push({sClass:"right",iDataSort:i-1,sType:"numeric"}),visibleCols.push(!0)):13==i&&showOrigReport||12==i&&!showOrigReport?(submissionsDataTableColumns.push({sClass:"right"}),visibleCols.push(!0)):1==i||9<=i&&!showOrigReport&&!useGradeMark||11<=i&&(!showOrigReport&&useGradeMark||showOrigReport&&!useGradeMark)||13<=i&&showOrigReport&&useGradeMark?(submissionsDataTableColumns.push({sClass:"center",bSortable:!1}),visibleCols.push(!0)):(0==i||4==i||7==i||9==i&&showOrigReport||9==i&&!showOrigReport||11==i&&useGradeMark)&&(submissionsDataTableColumns.push({bVisible:!1}),visibleCols.push(!1));else for(var i=0;i<noOfColumns;i++)2==i?(submissionsDataTableColumns.push(null),visibleCols.push(!0)):4==i?(submissionsDataTableColumns.push({iDataSort:i-1,sType:"string"}),visibleCols.push(!0)):5==i?(submissionsDataTableColumns.push({sClass:"right"}),visibleCols.push(!0)):7==i||9==i&&showOrigReport||9==i&&!showOrigReport||11==i&&useGradeMark?(submissionsDataTableColumns.push({sClass:"right",iDataSort:i-1,sType:"numeric"}),visibleCols.push(!0)):12==i&&showOrigReport||11==i&&!showOrigReport?(submissionsDataTableColumns.push({sClass:"right"}),visibleCols.push(!0)):1==i||8<=i&&!showOrigReport&&!useGradeMark||10<=i&&(!showOrigReport&&useGradeMark||showOrigReport&&!useGradeMark)||12<=i&&showOrigReport&&useGradeMark?(submissionsDataTableColumns.push({sClass:"center",bSortable:!1}),visibleCols.push(!0)):(0==i||3==i||6==i||8==i&&showOrigReport||8==i&&!showOrigReport||10==i&&useGradeMark)&&(submissionsDataTableColumns.push({bVisible:!1}),visibleCols.push(!1));var partTables=[],refreshRequested=[];$("table.submissionsDataTable").each(function(){var s=$(this).attr("id");refreshRequested[s]=0,partTables[s]=$("table#"+s).dataTable({bProcessing:!0,aoColumns:submissionsDataTableColumns,aLengthMenu:[[10,25,50,100,-1],[10,25,50,100,"All"]],aaSorting:[[2,"asc"],[4,"asc"]],sAjaxSource:"ajax.php",oLanguage:dataTablesLang,sDom:'r<"listbar-container"<"top listbar clearfix"lf>><"dt_pagination clearfix"pi>t<"bottom"><"dt_pagination clearfix"pi>',fnServerData:function(i,e,t){$.ajax({dataType:"json",type:"POST",url:i,data:{action:"initialise_redraw"},success:function(i){disableEditingText(s),t(i),$("#"+s+"_processing").attr("style","visibility: visible"),getSubmissions(partTables[s],$("#assignment_id").html(),s,0,refreshRequested,0)}})},bStateSave:!0,fnStateSave:function(i,e){try{localStorage.setItem(s+"DataTables",JSON.stringify(e))}catch(i){}},fnStateSaveParams:function(i,e){e.abVisCols=visibleCols},fnStateLoad:function(i){try{return JSON.parse(localStorage.getItem(s+"DataTables"))}catch(i){}},fnStateLoadParams:function(i,e){e.abVisCols=visibleCols},fnDrawCallback:function(i){initialiseDigitalReceipt(),initialiseDVLaunchers("all",0,s,0),initialiseRefreshRow("all",0,s,0),initialiseUploadBox("all",0,0,0),initialiseZipDownloads(s),initialiseCheckboxes(0,s),initialiseUnanoymiseForm("all",0,0)}})}),$("table.submissionsDataTable").each(function(){refreshPeermarkAssignments($(this).attr("id"),0)}),0<$(".messages_amount").length&&refreshUserMessages(),$(".tii_table_functions").each(function(){var i=$(this).attr("id").split("tii_table_functions_")[1],e=$("#tii_table_functions_"+i).html();$("#tii_table_functions_"+i).remove(),$("#"+i+"_length").after(e),$(".messages_inbox").show(),$("#refresh_"+i).show(),$("#refreshing_"+i).hide()});var zip_downloads=$(".zip_downloads"),theDate;function enableEditingText(i){$("#tabs-"+i+" .editable_date, #tabs-"+i+" .editable_text").editable("enable")}function disableEditingText(i){$("#tabs-"+i+" .editable_date, #tabs-"+i+" .editable_text").editable("disable")}function getLoadingGif(){$("#cboxOverlay").after('<div class="loading_gif"></div>');var i=$(window).scrollTop()+$(window).height()/2;$(".loading_gif").css("top",i+"px")}function hideLoadingGif(){$(".loading_gif").remove()}function getSubmissions(table,assignment_id,part_id,start,refresh_requested,total){$.ajax({dataType:"json",type:"POST",url:"ajax.php",async:!0,data:{action:"get_submissions",assignment:assignment_id,part:part_id,start:start,refresh_requested:refresh_requested[part_id],sesskey:M.cfg.sesskey,total:total},success:function(result){var allrefreshed;eval(result),start=result.end,0<result.aaData.length&&table.fnAddData(result.aaData),result.end<result.total?getSubmissions(table,assignment_id,part_id,start,refresh_requested,result.total):($("#"+part_id+"_processing").attr("style","visibility: hidden"),refresh_requested[part_id]=0,allrefreshed=1,$.each(refresh_requested,function(i,e){1==e&&(allrefreshed=0)}),1==allrefreshed&&($(".refreshing_link").hide(),$(".refresh_link").show()),submitVisibility(),enableEditingText(part_id),0<result.nonsubmitters&&$(".nonsubmitters_link").attr("style","display: block"))},error:function(i,e){$("#"+part_id+"_processing").attr("style","visibility: hidden"),$(".dataTables_empty").html(M.str.turnitintooltwo.tiisubmissionsgeterror)}})}function submitVisibility(){1==$(".upload_box").data("user-type")||1==$(".upload_box").data("eula")?$(".upload_box").show():$(".upload_box").hide()}function refreshRubricSelect(){var t=$("#id_rubric").length?"#id_rubric":"#id_plagiarism_rubric",e=$(t).val();$.ajax({dataType:"json",type:"POST",url:"../mod/turnitintooltwo/ajax.php",data:{action:"refresh_rubric_select",assignment:$('input[name="instance"]').val(),modulename:$('input[name="modulename"]').val(),course:$('input[name="course"]').val()},success:function(i){$($(t)).empty(),$.each(i,function(i,e){var s;$.isNumeric(i)||""===i?$($(t)).append($("<option>",{value:i,text:e})):((s=$("<optgroup>")).attr("label",i),$.each(e,function(i,e){var t=$("<option></option>");t.val(i),t.text(e),s.append(t)}),$(t).append(s))}),$(t+' option[value="'+e+'"]').attr("selected","selected")}})}function refreshUserMessages(){$(".messages_loading").show(),$(".messages_amount").html(""),$.ajax({dataType:"html",type:"POST",url:"ajax.php",data:{action:"refresh_user_messages",assignment:$("#assignment_id").html()},success:function(i){$(".messages_loading").hide(),$(".messages_amount").html(i)}})}function resetPeermarkSection(i){$("#tabs-"+i+" .toggle_peermarks").hide(),$("#tabs-"+i+" .peermark_count").html(""),$("#tabs-"+i+" .peermark-loading").show(),$("#tabs-"+i+" .peermark_assignments_container").hide()}function refreshPeermarkAssignments(part_id,refresh_requested){var user_role=0<$(".tii_peermark_manager_launch").length?"Instructor":"Learner";0<$("#tabs-"+part_id+" .peermark_assignments_container").length&&(resetPeermarkSection(part_id),$.ajax({dataType:"json",type:"POST",url:"ajax.php",data:{action:"refresh_peermark_assignments",assignment:$("#assignment_id").html(),part:part_id,refresh_requested:refresh_requested,sesskey:M.cfg.sesskey},success:function(data){eval(data),$("#tabs-"+part_id+" .peermark_assignments_container").html(data.peermark_table),$("#tabs-"+part_id+" .peermark-loading").hide(),$("#tabs-"+part_id+" .peermark_count").html(data.no_of_peermarks),0<data.no_of_peermarks?$("#tabs-"+part_id+" .toggle_peermarks").show():$("#tabs-"+part_id+" .toggle_peermarks").hide(),(0<data.no_of_peermarks&&"Instructor"==user_role||data.peermarks_active&&"Learner"==user_role)&&$("#tabs-"+part_id+" .row_peermark_reviews").show(),"true"==$.cookie("show_peermarks_"+$("#assignment_id").html())&&0<data.no_of_peermarks?($(".show_peermarks_"+$("#assignment_id").html()).hide(),$(".hide_peermarks_"+$("#assignment_id").html()).show(),$(".peermark_assignments_container").slideDown()):($(".show_peermarks_"+$("#assignment_id").html()).show(),$(".hide_peermarks_"+$("#assignment_id").html()).hide(),$(".peermark_assignments_container").slideUp())}}))}function initialiseUnanoymiseForm(scope,assignment_id,submission_id){var identifier="row"==scope?"#submission_"+submission_id:"a.unanonymise";$(identifier).colorbox({inline:!0,width:"50%",top:"100px",height:"260px",opacity:"0.7",className:"tii_unanonymise_reveal_form",onComplete:function(){var idStr=$(this).attr("id").split("_"),submission_id;0!=submission_id&&null!=submission_id||(submission_id=idStr[1]),0==assignment_id&&(assignment_id=$("#assignment_id").html()),$("#submission_id").html(submission_id),$("#cboxLoadedContent .mod_turnitintooltwo_unanonymise_form").show(),$("#id_reveal").unbind("click"),$("#id_reveal").click(function(){$.ajax({dataType:"json",type:"POST",url:"ajax.php",data:{action:"reveal_submission_name",assignment:assignment_id,submission_id:submission_id,reason:encodeURIComponent($("#id_anonymous_reveal_reason").val()),sesskey:M.cfg.sesskey},success:function(data){var current_msg;eval(data),"success"==data.status?($.colorbox.close(),$("#submission_"+submission_id).attr("href",M.cfg.wwwroot+"/user/view.php?id="+data.userid+"&course="+data.courseid),$("#submission_"+submission_id).html(data.name),$("#submission_"+submission_id).removeClass("unanonymise cboxElement")):(current_msg=$("#mod_turnitintooltwo_unanonymise_desc").html,$("#mod_turnitintooltwo_unanonymise_desc").html(current_msg+" "+data.msg))}})})},onCleanup:function(){$(".mod_turnitintooltwo_unanonymise_form").hide()}})}function initialiseUploadBox(i,e,t,s){var a=".upload_box";"row"==i&&(a="#upload_"+e+"_"+t+"_"+s);$(a).colorbox({onLoad:function(){getLoadingGif(),lightBoxCloseButton(),$(this).hide()},onClosed:function(){hideLoadingGif()},onCleanup:function(){hideLoadingGif();var i=$(this).attr("id").split("_");refreshInboxRow("upload",i[1],i[2],i[3]),$("#tii_close_bar").remove()},iframe:!0,width:"80%",height:"80%",opacity:"0.7",className:"upload",transition:"none"})}function initialiseZipDownloads(t){$("#tabs-"+t+" .orig_zip_open, #tabs-"+t+" .pdf_zip_open, #tabs-"+t+" .xls_inbox_open").unbind("click"),$("#tabs-"+t+" .orig_zip_open, #tabs-"+t+" .pdf_zip_open, #tabs-"+t+" .xls_inbox_open").click(function(){var i=$(this).attr("id").split("_");downloadZipFile(i[0]+"_"+i[1],i[2])}),$("#tabs-"+t+" .downloadpdf_box").colorbox({iframe:!0,width:"40%",height:"60%",opacity:"0.7",className:"downloadpdf_window",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()},onClosed:function(){refreshUserMessages()}}),$(document).on("click","#tabs-"+t+" .gmpdfzip_box",function(i){return $(this).colorbox({open:!0,iframe:!0,width:"786px",height:"300px",opacity:"0.7",className:"gmpdfzip_window",transition:"none",href:function(){var e="";return $("#tabs-"+t+" .inbox_checkbox:checked").each(function(i){e+="&submission_id"+i+"="+$(this).val(),i++}),$(this).attr("href")+e},onLoad:function(){getLoadingGif()},onCleanup:function(){hideLoadingGif()},onClosed:function(){refreshUserMessages()}}),!1})}function lightBoxCloseButton(){$("body").append('<div id="tii_close_bar"><a href="#" onclick="jQuery(\'#cboxClose\').click(); return false;">'+M.str.turnitintooltwo.closebutton+"</a></div>")}function initialiseDigitalReceipt(){0<$(".mod_turnitintooltwo_digital_receipt").length&&$(".mod_turnitintooltwo_digital_receipt").colorbox({iframe:!0,width:"832px",height:"482px",opacity:"0.7",className:"rubric_view",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}})}function initialiseHiddenZipDownloads(e){$("#tabs-"+e+" .origchecked_zip_open").unbind("click"),$("#tabs-"+e+" .origchecked_zip_open").click(function(){var i=$(this).attr("id").split("_");return downloadZipFile(i[0]+"_"+i[1],e),!1})}function initialiseRefreshRow(i,e,t,s){s="row"==i?"#refreshrow_"+e+"_"+t+"_"+s+" .fa-refresh":".refresh_row .fa-refresh";$(s).unbind("click"),$(s).click(function(){$(this).hide(),$(this).siblings(".fa-spinner").css("display","inline-block").addClass("fa-lg");var i=$(this).parent().attr("id").split("_");refreshInboxRow(i[0],i[1],i[2],i[3])})}function initialiseDVLaunchers(i,e,t,s){t="row"==i?"#downloadoriginal_"+e+"_"+t+"_"+s:"#"+t+" .download_original_open";$(t).unbind("click"),$(t).click(function(){var i=$(this).attr("id").split("_");$(this).children(".score_colour").hasClass("score_colour_")||downloadOriginalFile(i[0],i[1],i[2],i[3])})}function downloadZipFile(e,t){var s=[];"origchecked_zip"!=e&&"gmpdf_zip"!=e||$("#tabs-"+t+" .inbox_checkbox:checked").each(function(i){s[i]=$(this).val()}),$.ajax({type:"POST",url:"ajax.php",dataType:"html",data:{action:e,assignment:$("#assignment_id").html(),part:t,submission_ids:s},success:function(i){$("#"+e+"_form_"+t).html(i),$("#"+e+"_form_"+t).children("form").submit(),$("#"+e+"_form_"+t).html("")}})}function downloadOriginalFile(e,t,i,s){$.ajax({type:"POST",url:M.cfg.wwwroot+"/mod/turnitintooltwo/ajax.php",dataType:"html",data:{action:e,submission:t,assignment:$("#assignment_id").html()},success:function(i){$("#"+e+"_form_"+t).html(i),$("#"+e+"_form_"+t).children("form").submit(),$("#"+e+"_form_"+t).html("")}})}function checkDVClosed(i){window.dvWindow.closed?$("#refresh_"+i).click():setTimeout(function(){checkDVClosed(i)},500)}function submitNothing(user_id,part_id){$("#submitnothing_0_"+part_id+"_"+user_id+" i").attr("class","fa fa-spin fa-spinner fa-lg"),$.ajax({type:"POST",url:"ajax.php",dataType:"json",data:{action:"submit_nothing",assignment:$("#assignment_id").html(),part:part_id,user:user_id,sesskey:M.cfg.sesskey},success:function(data){eval(data),$.cookie("submitnothingaccept",!0,{expires:365}),$("table#"+part_id+" .select_all_checkbox").attr("checked",!1)},error:function(i){$("#submitnothing_0_"+part_id+"_"+user_id+" i").attr("class","fa fa-pencil fa-lg"),$("#submitnothing_0_"+part_id+"_"+user_id).removeClass("disabled"),alert(i.responseText)},complete:function(){refreshInboxRow("submitnothing",0,part_id,user_id)}})}function refreshInboxRow(link,submission_id,part_id,user_id){$.ajax({type:"POST",url:"ajax.php",dataType:"json",data:{action:"refresh_submission_row",assignment:$("#assignment_id").html(),part:part_id,user:user_id,sesskey:M.cfg.sesskey},success:function(data){$("table#"+part_id+" .select_all_checkbox").attr("checked",!1),eval(data);var i=0;0==submission_id?(link+="_0",submission_id=data.submission_id):link=null==data.submission_id&&0!=submission_id?link+"_"+submission_id:link+"_"+data.submission_id,0!=submission_id&&$("#export_links").removeClass("hidden_class"),oTable=$("table#"+part_id).dataTable();var tr=$("#"+link+"_"+part_id+"_"+user_id).parent().parent(),rowindex=tr.index();oTable.fnDeleteRow(tr),oTable.fnAddData(data.row),submitVisibility(),initialiseUploadBox("row",data.submission_id,part_id,user_id),initialiseDVLaunchers("row",data.submission_id,part_id,user_id),initialiseRefreshRow("row",data.submission_id,part_id,user_id),initialiseCheckboxes(data.submission_id,part_id),initialiseUnanoymiseForm("row",$("#assignment_id").html(),data.submission_id)}})}function initialiseCheckboxes(i,e){i=0!=i?"check_"+i:"#tabs-"+e+" .inbox_checkbox";$("#tabs-"+e+" .inbox_checkbox").click(function(){$("table#"+e+" .select_all_checkbox").attr("checked",!1)}),$(document).on("click",i+", .select_all_checkbox",function(){0<$("#tabs-"+e+" .inbox_checkbox:checked").length?($("#tabs-"+e+" .zip_downloads button").prop("disabled",!1),$("#tabs-"+e+" .zip_downloads button").removeAttr("title"),initialiseHiddenZipDownloads(e)):($("#tabs-"+e+" .origchecked_zip_open").unbind("click"),$("#tabs-"+e+" .zip_downloads button").prop("disabled",!0),$("#tabs-"+e+" .zip_downloads button").prop("title",M.str.turnitintooltwo.download_button_warning))})}function showPartDatesBoxes(){for(var i=0;i<=5;i++)i<=$("#id_numparts").val()?$('fieldset[id$="partdates'+i+'"]').slideDown():$('fieldset[id$="partdates'+i+'"]').slideUp()}$.each(zip_downloads,function(){var i=$(this).attr("id").split("_")[1];$(this).remove(),$("#"+i+"_length").after($(this))}),"Learner"==$("#user_role").html()&&$(".dataTables_length, .dataTables_filter, .dt_pagination").hide(),$(".refresh_link").click(function(){return $(this).is(":visible")&&($(".refresh_link").hide(),$(".refreshing_link").show(),$("table.submissionsDataTable").each(function(){refreshRequested[$(this).attr("id")]=1,partTables[$(this).attr("id")].fnReloadAjax(),partTables[$(this).attr("id")].fnStandingRedraw()})),!1}),0<$("#turnitin_sync_all_grades").length&&$(".turnitin_sync_grades").click(function(){$(".turnitin_sync_grades").hide(),$(".turnitin_syncing_grades").show(),$.ajax({type:"POST",url:M.cfg.wwwroot+"/mod/turnitintooltwo/ajax.php",dataType:"json",data:{action:"sync_all_submissions",assignment:$("#turnitin_sync_all_grades").data("turnitintooltwoid"),sesskey:M.cfg.sesskey},success:function(i){$(".turnitin_sync_grades").show(),$(".turnitin_syncing_grades").hide()}})}),0<$(".submission_failure_msg").length&&window.parent.$(".upload_box").colorbox.resize({width:"800px",height:"240px"}),$(".enrol_link").click(function(){$("#enrolling_error").hide(),$(".enrol_link").hide(),$(".enrolling_container").show(),$.ajax({type:"POST",url:"ajax.php",dataType:"html",data:{action:"enrol_all_students",assignment:$("#assignment_id").html(),sesskey:M.cfg.sesskey},success:function(i){window.location.href=window.location.href},error:function(i,e){$(".enrol_link").show(),$(".enrolling_container").hide(),$("#enrolling_error").show()}})}),0<$(".rubric_manager_launch").length&&$(".rubric_manager_launch").colorbox({iframe:!0,width:"832px",height:"682px",opacity:"0.7",className:"rubric_manager",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){hideLoadingGif(),"rubric_manager_inbox_launch"!=$(this).attr("id")&&refreshRubricSelect(),$("#tii_close_bar").remove()}}),0<$(".rubric_view_launch").length&&$(".rubric_view_launch").colorbox({iframe:!0,width:"832px",height:"682px",opacity:"0.7",className:"rubric_view",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),$("#id_rubric, #id_plagiarism_rubric").mousedown(function(){""!=$('input[name="instance"]').val()&&"Y"!=$('input[name="rubric_warning_seen"]').val()&&confirm(M.str.turnitintooltwo.changerubricwarning)&&$('input[name="rubric_warning_seen"]').val("Y")}),(0<$(".quickmark_manager_launch").length||0<$(".plagiarism_turnitin_quickmark_manager_launch").length)&&$(".quickmark_manager_launch, .plagiarism_turnitin_quickmark_manager_launch").colorbox({iframe:!0,width:"770px",height:"600px",opacity:"0.7",className:"quickmark_manager",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),0<$(".tii_peermark_manager_launch").length&&$(".tii_peermark_manager_launch").colorbox({iframe:!0,width:"802px",height:"772px",opacity:"0.7",className:"peermark_manager",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()},onClosed:function(){refreshPeermarkAssignments($(this).attr("id").split("_")[2],1)}}),0<$(".tii_peermark_reviews_launch").length&&$(".tii_peermark_reviews_launch").colorbox({iframe:!0,width:"802px",height:"772px",opacity:"0.7",className:"peermark_reviews",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),0<$(".messages_inbox").length&&$(".messages_inbox").colorbox({iframe:!0,width:"772px",height:"772px",opacity:"0.7",className:"messages",transition:"none",closeButton:!0,onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),0<$(".nonsubmitters_link").length&&$(".nonsubmitters_link").colorbox({iframe:!0,width:"740px",height:"540px",opacity:"0.7",className:"nonsubmitters",transition:"none",closeButton:!0,onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),0<$(".mod_turnitintooltwo_nonsubmittersformsuccessmsg").length&&(hideLoadingGif(),window.parent.$(".nonsubmitters").colorbox.resize({width:"740px",height:"120px"})),0<$(".rubric_view_launch").length&&$(".rubric_view_launch").colorbox({iframe:!0,width:"832px",height:"682px",opacity:"0.7",className:"rubric_view",transition:"none",onLoad:function(){lightBoxCloseButton(),getLoadingGif()},onCleanup:function(){$("#tii_close_bar").remove(),hideLoadingGif()}}),$(document).on("click",".default_open, .origreport_open, .grademark_open",function(){var e,i=!0,t=$(this).attr("id").split("_"),s=$("#date_due_"+t[2]).html(),a=moment(s).unix(),n=t[0],s=t[1],o=t[2];a>moment().unix()&&$(this).hasClass("graded_warning")&&(confirm(M.str.turnitintooltwo.resubmissiongradewarn)||(i=!1)),i&&(dvWindow=window.open("","_blank"),e='<div style="text-align:center;">',e+='<img src="'+M.cfg.wwwroot+'/mod/turnitintooltwo/pix/tiiIcon.svg" style="width:100px; height: 100px">',e+='<p style="font-family: Arial, Helvetica, sans-serif;">'+M.str.turnitintooltwo.loadingdv+"</p>",e+="</div>",$(dvWindow.document.body).html(e),$.ajax({type:"POST",url:M.cfg.wwwroot+"/mod/turnitintooltwo/ajax.php",dataType:"json",data:{action:n,submission:s,assignment:$("#assignment_id").html()},success:function(i){$(dvWindow.document.body).html(e+i),dvWindow.document.forms[0].submit(),dvWindow.document.close(),checkDVClosed(o)}}))}),0<$("#id_rubric").length&&refreshRubricSelect(),self!=top&&"box"==$("#view_context").html()?$("html").css("background","none"):self!=top&&"box_solid"==$("#view_context").html()&&$("html").css("background","#FFF"),$(".editable_postdue").on("click",function(){1==$(this).data("anon")&&alert(M.str.turnitintooltwo.postdate_warning)}),$(".max_marks_warning").on("click",function(){alert(M.str.turnitintooltwo.max_marks_warning)}),0<$(".editable_text").length&&($.fn.editable.defaults.mode="inline",$.fn.editable.defaults.url="ajax.php",$.fn.editable.defaults.onblur="submit",$.fn.editable.defaults.showbuttons=!1,$.fn.editable.defaults.ajaxOptions={dataType:"json"},$(".editable_text").editable({validate:function(i){if(0<=$(this).attr("id").indexOf("marks_")&&(Math.floor(i)!=i||!$.isNumeric(i)||-1!=i.indexOf(".")))return M.str.turnitintooltwo.maxmarkserror},success:function(i,e){if(!i.success)return i.msg;"maxmarks"==i.field?($("#refresh_"+i.partid).click(),$.ajax({type:"POST",url:M.cfg.wwwroot+"/mod/turnitintooltwo/ajax.php",dataType:"json",data:{action:"sync_all_submissions",assignment:$("#assignment_id").html(),sesskey:M.cfg.sesskey}})):"partname"==i.field&&(i=$(this).parentsUntil(".ui-tabs-panel").parent().attr("aria-labelledby"),$("#"+i).text(e))}}),$("#export_options").hasClass("tii_export_options_hide")&&($("#export_options").hide(),$(".export_data").html('<span class="empty-dash">--</span>')),$(".editable_postdue").on("click",function(){var e=$(this);$.ajax({type:"POST",url:"ajax.php",dataType:"json",data:{action:"check_anon",part:e.data("pk"),assignment:$("#assignment_id").html()},success:function(i){e.data("anon",i.anon),e.data("unanon",i.unanon),e.data("submitted",i.submitted)}})}),theDate=new Date,$(".editable_date").editable({type:"combodate",format:"YYYY-MM-DD HH:mm",viewformat:"D MMM YYYY, HH:mm",template:"D MMM YYYY  HH:mm",combodate:{minuteStep:1,minYear:2e3,maxYear:theDate.getFullYear()+2,smartDays:!0},validate:function(i){if(i.format("X")<moment().unix()&&$(this).hasClass("editable_postdue")&&1==$(this).data("anon")&&0==$(this).data("unanon")&&1==$(this).data("submitted")&&!confirm(M.str.turnitintooltwo.disableanonconfirm))return $(".editable-open").editableContainer("hide")," "},success:function(i,e){if(!i.success)return i.msg;$("#refresh_"+i.partid).click(),"tii_export_options_hide"==i.export_option?($("#export_options").hide(),$(".export_data").html('<span class="empty-dash">--</span>')):($(".empty-dash").remove(),$("#export_options").show())}}),$(".editable_date").click(function(){if($(this).hasClass("editable-disabled"))return!1}),$(".editable_date, .editable_text").on("shown",function(i,e){var t=$(this).prop("id");$(".editable_date, .editable_text").not("#"+t).editable("disable"),$(".submit_nothing").addClass("disabled")}),$(".editable_date, .editable_text").on("hidden",function(){var i=$(this).prop("id");$(".editable_date, .editable_text").not("#"+i).editable("enable"),$(".submit_nothing").removeClass("disabled")})),$("#inbox_form form, .launch_form form").submit(),0<$(".turnitin_eula_link").length&&$(".turnitin_eula_link").colorbox({iframe:!0,width:"766px",height:"596px",opacity:"0.7",className:"eula_view",scrolling:"false",onLoad:function(){getLoadingGif()},onComplete:function(){$(window).on("message",function(i){i=(void 0===i.data?i.originalEvent:i).data;"turnitin_eula_declined"!=i&&"turnitin_eula_accepted"!=i||$.ajax({type:"POST",url:M.cfg.wwwroot+"/mod/turnitintooltwo/ajax.php",dataType:"json",data:{action:"acceptuseragreement",message:i,sesskey:M.cfg.sesskey},success:function(i){window.location.reload()},error:function(i){window.location.reload()}})})},onCleanup:function(){hideLoadingGif()}}),$("#mod_turnitintooltwo_receipt_print").click(function(){window.print()}),$(".select_all_checkbox").on("click",function(){var i=$(this).parent().parent().parent().parent().attr("id");$(this).is(":checked")?($("#"+i+" .inbox_checkbox").length&&($("#tabs-"+i+" .zip_downloads button").prop("disabled",!1),$("#tabs-"+i+" .zip_downloads button").removeAttr("title")),$("#"+i+" .inbox_checkbox").each(function(){$(this).prop("checked",!0)})):($("#"+i+" .inbox_checkbox").each(function(){$(this).prop("checked",!1)}),$("#"+i+" .inbox_checkbox").length&&($("#tabs-"+i+" .zip_downloads button").prop("disabled",!0),$("#tabs-"+i+" .zip_downloads button").prop("title",M.str.turnitintooltwo.download_button_warning)))}),$("[id^=fitem_id_dtpost] select").change(function(){var i=$(this).parent().parent().parent();buildUnixDate("#fitem_id_dtpost",i.data("partId"))<moment().unix()&&1==i.data("anon")&&0==i.data("unanon")&&1==i.data("submitted")&&alert(M.str.turnitintooltwo.anonalert)});var buildUnixDate=function(i,t){$this=$(i+t);var s="";return $.each(["_day","_month","_year","_hour","_minute"],function(i,e){s+=$this.find("[id$="+t+e+"] option:selected").text(),"_year"===e?s+=" ":"_hour"===e?s+=":":"_minute"!==e&&(s+="-")}),moment(s,"DD-MMMM-YYYY hh:mm").unix()}})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
